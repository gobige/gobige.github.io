 字典编码:数据中重复的数据,通过(距离,长度)来标识进行压缩,相当于对一个内存进行操作,先拿到一个指针,然后到那块内存去操作.
 
 针对出现的少的整数多编一些byte,出现多的整数少编一些比特.
 
 重复现象往往具有局部性.
 
 byte表示越短越好,通过码表的映射,比如:
 3-->0
 5-->10
 7-->11
 
 通过码表的映射表达出指针的内存区域
 
 ZIP之LZ编码思想
 上面所说的重复字符串用指针标记记录下来,称为LZ编码思想;而上面码表映射指针编码称为Huffman编码.
 
 ![此处输入图片的描述](http://yatesblog.oss-cn-shenzhen.aliyuncs.com/img/compression/1.png)
 
 如图:滑动窗口设置的大小意味着找到重复字符串概率越大,压缩率越高,但是计算量就会增大
 
 如图:"在容易."压缩字符串后有字符串"我",所以无法使用distance+length的方式记录,这种结果称为literal,表示原义.
 
 一段字符串最终就可以表示literal,distance+length两种形式.LZ系列算法之后使用Huffman算法进行二次压缩.
 
### huffman算法
**distance压缩**,假如一个文件进行LZ压缩后得到的distance值为:
3,6,4,3,4,3,4,5
针对这些distance我们只需要对4个整数进行编码
00-->3; 01-->4;10-->5;11-->6.
00,01称为码字,码字平均长度为2,上面称为码表,在**压缩**时,需要将**码表**放在最**前面**,**后面**的数字就用**码字**表示,解码时,先把码表记录在内存里,比如用一个哈希表记录下来,解压缩时,对**码字**进行码表一一映射.如果想要编码更短,对出现最多的**distance**用**最短的码字**来标识
设计码表的时候要注意,每个码字的值不能造成**误读**,比如3设计成10,那么5就不能使用10开头的了.也就是**前缀码**识别排除.所以Huffman算法基本思路就是:把出现频率排个序,然后逐个去找,这个做个去找的过程,引入**二叉树**.把码表形成**码树**
一个32KB的滑动窗口,distance值范围是1-32768,那么问题来了,这样的一颗码树是非常大的,那么有没有什么方法能够使码树变小呢?如果有了解过数据结构的同学会知道平衡二叉树,整个树的遍历会很快